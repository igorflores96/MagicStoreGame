//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputAction/PlayerMovement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerMovement: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerMovement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMovement"",
    ""maps"": [
        {
            ""name"": ""MovementPlayer"",
            ""id"": ""59266186-fe6d-4dcf-aa26-11236aa7b155"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""6cf6ce64-3a44-4687-951b-75951472f3ed"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GrabItem"",
                    ""type"": ""Button"",
                    ""id"": ""8fa594dd-c6e0-4970-b796-49cfca261f7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLook"",
                    ""type"": ""Value"",
                    ""id"": ""73959742-01e4-40ef-a366-c79f5aac0dba"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UseMachine"",
                    ""type"": ""Button"",
                    ""id"": ""735750ac-c6a5-4b6b-8527-f6100a0ef106"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=10)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""3a6e8749-cfb3-43b0-88a9-3cc3527bb6bf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4b8d71a5-044d-47a8-8304-742c55fb1505"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""61d7b6a2-78c2-4fb2-924c-7f27070001b4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""68fc0629-5a64-4ec2-90eb-1768975f7efb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5b2a6b6c-deb4-4c31-b408-fd47d8cb852e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""1372df9c-d704-4fa2-b693-cae58c731c44"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""16030b69-05ae-496e-95cd-b45c068e1686"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""634dde69-6f2d-4b34-8d1c-69d4a5bc9559"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d3933c43-c6d1-4a0b-9cbd-abdb1613df63"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""88d84fbc-cda8-4661-957a-d919d28d468b"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5d6fff40-1aed-489e-a5ca-ac12086c7573"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GrabItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66f84fc7-915c-459c-a33d-f1cd2cfe41a3"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""GamepadLook"",
                    ""id"": ""8a7eb3b0-fc9c-4528-9528-25cddb7ebaa3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f895cd29-42e5-4371-b3a2-87b1b73b9f9f"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c375c5f0-76e2-4f54-af58-567f3f18f910"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3514c41d-cf45-4c10-95c6-9149dc00bb6a"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""77ac9f56-42a3-485f-acd9-83e7b8672dd3"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5089e8b8-77f1-49a9-bd26-50b276165164"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseMachine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcd0f487-7555-4f80-a0be-821f04d58412"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseMachine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementPlayer
        m_MovementPlayer = asset.FindActionMap("MovementPlayer", throwIfNotFound: true);
        m_MovementPlayer_Movement = m_MovementPlayer.FindAction("Movement", throwIfNotFound: true);
        m_MovementPlayer_GrabItem = m_MovementPlayer.FindAction("GrabItem", throwIfNotFound: true);
        m_MovementPlayer_MouseLook = m_MovementPlayer.FindAction("MouseLook", throwIfNotFound: true);
        m_MovementPlayer_UseMachine = m_MovementPlayer.FindAction("UseMachine", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementPlayer
    private readonly InputActionMap m_MovementPlayer;
    private List<IMovementPlayerActions> m_MovementPlayerActionsCallbackInterfaces = new List<IMovementPlayerActions>();
    private readonly InputAction m_MovementPlayer_Movement;
    private readonly InputAction m_MovementPlayer_GrabItem;
    private readonly InputAction m_MovementPlayer_MouseLook;
    private readonly InputAction m_MovementPlayer_UseMachine;
    public struct MovementPlayerActions
    {
        private @PlayerMovement m_Wrapper;
        public MovementPlayerActions(@PlayerMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MovementPlayer_Movement;
        public InputAction @GrabItem => m_Wrapper.m_MovementPlayer_GrabItem;
        public InputAction @MouseLook => m_Wrapper.m_MovementPlayer_MouseLook;
        public InputAction @UseMachine => m_Wrapper.m_MovementPlayer_UseMachine;
        public InputActionMap Get() { return m_Wrapper.m_MovementPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IMovementPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementPlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @GrabItem.started += instance.OnGrabItem;
            @GrabItem.performed += instance.OnGrabItem;
            @GrabItem.canceled += instance.OnGrabItem;
            @MouseLook.started += instance.OnMouseLook;
            @MouseLook.performed += instance.OnMouseLook;
            @MouseLook.canceled += instance.OnMouseLook;
            @UseMachine.started += instance.OnUseMachine;
            @UseMachine.performed += instance.OnUseMachine;
            @UseMachine.canceled += instance.OnUseMachine;
        }

        private void UnregisterCallbacks(IMovementPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @GrabItem.started -= instance.OnGrabItem;
            @GrabItem.performed -= instance.OnGrabItem;
            @GrabItem.canceled -= instance.OnGrabItem;
            @MouseLook.started -= instance.OnMouseLook;
            @MouseLook.performed -= instance.OnMouseLook;
            @MouseLook.canceled -= instance.OnMouseLook;
            @UseMachine.started -= instance.OnUseMachine;
            @UseMachine.performed -= instance.OnUseMachine;
            @UseMachine.canceled -= instance.OnUseMachine;
        }

        public void RemoveCallbacks(IMovementPlayerActions instance)
        {
            if (m_Wrapper.m_MovementPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementPlayerActions @MovementPlayer => new MovementPlayerActions(this);
    public interface IMovementPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnGrabItem(InputAction.CallbackContext context);
        void OnMouseLook(InputAction.CallbackContext context);
        void OnUseMachine(InputAction.CallbackContext context);
    }
}
